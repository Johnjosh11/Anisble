---

# file: artifact-install.yml
# This playbook install the artifact tar/war on target(production) server

- hosts: "{{REMOTE_HOSTS_GROUP}}"
  remote_user: root
  serial: 1  
  
  vars_files:
   - vars/prod/{{ MODULE_NAME }}/{{ INSTALL_SPEC_FILE }}.yml
   
  vars:
   - pre_install: "{{ dist_remotecommands_pre_install | default('')}}"
   - post_install: "{{ dist_remotecommands_post_install | default('')}}"   
   
  tasks:
  
  - name: "execute ls command on {{ REMOTE_HOSTS_GROUP }}"
    shell: ls
    args:
      chdir: /tmp
    register: lsOutput
    
    
  - name: "display the result of ls"
    debug:
      msg: "{{lsOutput.stdout_lines}}"
      
  - fail:
      msg: "stoping as task of ls completed"
      
      
  - name: "TAR: Check if tag folder exists"
    stat:
      path: "{{dist_remotedir_install}}/{{dist_appname}}-1.0-{{TAG_NAME}}"
    register: tar_stat_result
    when: EXT == "tar" 

  - fail:
      msg: "ERROR: Tar tag does not exists......"
    when: tar_stat_result is defined and tar_stat_result.stat.exists == False

  - name: "WAR: Check if tag file exists"
    stat:
      path: "{{dist_remotedir_install}}/{{dist_appname}}-1.0-{{TAG_NAME}}.{{EXT}}"
    register: war_stat_result
    when: EXT == "war" 

  - fail:
      msg: "ERROR: War tag does not exists......"
    when: war_stat_result is defined and war_stat_result.stat.exists == False

  - debug:
      msg: ">>{{ item.strip() }}<<"
    with_items: "{{ pre_install.split(';') }}"
    when: pre_install not in ''  
    
  - name: "store sever PID before deployment"
    shell: ps -ef | grep [t]omcat | awk "{ print \$2 }"
    register: oldPid
    
  - name: "server PID before deployment"
    debug: 
      var: oldPid.stdout
      
  #- fail:
   #   msg: "Server not running"
    #when: oldPid.stdout == ""

  - name: "Execute pre-install commands"
    shell: "{{ item.strip() }}"
    with_items: "{{ pre_install.split(';') }}"
    when: pre_install not in ''

  - name: "Remove symlink"
    file:
      path: "{{dist_remotedir_run}}/{{dist_appname}}"
      state: absent
    when: EXT == "tar"
    
  - name: "Remove symlink"
    file:
      path: "{{dist_remotedir_run}}/{{dist_appname}}.{{EXT}}"
      state: absent
    when: EXT == "war"
     

  - name: "TAR: create symbolic link"
    file:
      src: "{{dist_remotedir_install}}/{{dist_appname}}-1.0-{{TAG_NAME}}"
      dest: "{{dist_remotedir_run}}/{{dist_appname}}"
      owner: root
      group: root
      state: link
    when: EXT == "tar"
  
  - name: "WAR: create symbolic link"
    file:
      src: "{{dist_remotedir_install}}/{{dist_appname}}-1.0-{{TAG_NAME}}.{{EXT}}"
      dest: "{{dist_remotedir_run}}/{{dist_appname}}.{{EXT}}"
      owner: root
      group: root
      state: link
    when: EXT == "war"
    
  - stat:
      path: "{{dist_remotedir_run}}/{{dist_appname}}.{{EXT}}"
    register: links
    
  - fail:
      msg: "Linking failed"
    when: links.stat.islnk is not defined

  - name: "Linking is created successfully below is link path"
    debug:
      msg: "{{ links.stat.path }}->{{ links.stat.lnk_source }}"
    when: links.stat.islnk is defined and links.stat.islnk
  
  - name: "Execute post-install commands"
    shell: "{{ item.strip() }}"
    with_items: "{{ post_install.split(';') }}"
    when: post_install not in ''
    
    
  - name: "store sever PID after deployment"
    shell: ps -ef | grep [t]omcat | awk "{ print \$2 }"
    register: newPid
    
  - name: "server PID after deployment" 
    debug:
       var: newPid.stdout    
       
#  - fail:
 #     msg: "server Not stopped"
  #  when: oldPid.stdout == newPid.stdout
  
  #- fail:
   #   msg: "server stoped but not restared"
    #when: newPid.stdout == ""

      
      
